<xml xmlns="https://developers.google.com/blockly/xml"><block type="pxt-on-start" id="~s~O[JKA=;:0K,+vIIwg" x="0" y="0"><statement name="HANDLER"><block type="typescript_statement" id="{]~@gWK#Z48umZ1xG0Oz" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace game {" line1="    export interface PromptTheme {" line2="        colorPrompt: number;" line3="        colorInput: number;" line4="        colorInputHighlighted: number;" line5="        colorInputText: number;" line6="        colorAlphabet: number;" line7="        colorCursor: number;" line8="        colorBackground: number;" line9="        colorBottomBackground: number;" line10="        colorBottomText: number;" line11="    }" line12="" line13="    /**" line14="     * Ask the player for a string value with a timer!" line15="     * @param message The message to display on the text-entry screen" line16="     * @param answerLength The maximum number of characters the user can enter (1 - 24)" line17="     * @param timeOut The time to timeOut you can enter in seconds (0 - 99)" line18="     */" line19="    //% group=&quot;Gameplay&quot;" line20="    //% weight=10 help=game/ask-for-string-timer" line21="    //% blockId=gameaskforstringtimer block=&quot;ask for string %message || and max length %answerLength and timeout after %timeOut&quot;" line22="    //% message.defl=&quot;&quot;" line23="    //% answerLength.defl=&quot;12&quot;" line24="    //% answerLength.min=1" line25="    //% answerLength.max=24" line26="    //% timeOut.defl=0" line27="    //% timeOut.min=0" line28="    //% timeOut.max=99" line29="    //% group=&quot;Prompt with timer&quot;" line30="    //% expandableArgumentMode=&quot;enabled&quot;" line31="    export function askForStringWithTimer(message: string, answerLength: number = 12, timeOut: number = 0) {" line32="        // Note: We limit to 99 on the timer because it needs to fit in a single sprite frame" line33="        let p = new game.Prompt_timer();" line34="        const result = p.show(message, answerLength, timeOut * 1000);" line35="        return result;" line36="    }" line37="" line38="" line39="    //% whenUsed=true" line40="    const font = image.font8; // FONT8-TODO" line41="    //% whenUsed=true" line42="    const PADDING = 4;" line43="    //% whenUsed=true" line44="    const PROMPT_LINE_SPACING = 2;" line45="" line46="    //% whenUsed=true" line47="    const NUM_LETTERS = 26;" line48="    //% whenUsed=true" line49="    const ALPHABET_ROW_LENGTH = 12;" line50="    //% whenUsed=true" line51="    const NUM_ROWS = Math.ceil(NUM_LETTERS / ALPHABET_ROW_LENGTH);" line52="    //% whenUsed=true" line53="    const INPUT_ROWS = 2;" line54="" line55="    //% whenUsed=true" line56="    const CONTENT_WIDTH = screen.width - PADDING * 2;" line57="    //% whenUsed=true" line58="    const CONTENT_HEIGHT = screen.height - PADDING * 2;" line59="    //% whenUsed=true" line60="    const CONTENT_TOP = PADDING;" line61="" line62="    // Dimensions of a &quot;cell&quot; that contains a letter" line63="    //% whenUsed=true" line64="    const CELL_WIDTH = Math.floor(CONTENT_WIDTH / ALPHABET_ROW_LENGTH);" line65="    //% whenUsed=true" line66="    const CELL_HEIGHT = CELL_WIDTH;" line67="    //% whenUsed=true" line68="    const LETTER_OFFSET_X = Math.floor((CELL_WIDTH - font.charWidth) / 2);" line69="    //% whenUsed=true" line70="    const LETTER_OFFSET_Y = Math.floor((CELL_HEIGHT - font.charHeight) / 2);" line71="    //% whenUsed=true" line72="    const BLANK_PADDING = 1;" line73="    //% whenUsed=true" line74="    const ROW_LEFT = PADDING + CELL_WIDTH / 2 + Math.floor((CONTENT_WIDTH - (CELL_WIDTH * ALPHABET_ROW_LENGTH)) / 2);" line75="" line76="    // Dimensions of the bottom bar" line77="    //% whenUsed=true" line78="    const BOTTOM_BAR_ALPHABET_MARGIN = 4;" line79="    //% whenUsed=true" line80="    const BOTTOM_BAR_HEIGHT = PADDING + BOTTOM_BAR_ALPHABET_MARGIN + CELL_HEIGHT;" line81="    //% whenUsed=true" line82="    const BOTTOM_BAR_TOP = screen.height - BOTTOM_BAR_HEIGHT;" line83="    //% whenUsed=true" line84="    const BOTTOM_BAR_BUTTON_WIDTH = PADDING * 2 + font.charWidth * 3;" line85="    //% whenUsed=true" line86="    const BOTTOM_BAR_TEXT_Y = (BOTTOM_BAR_HEIGHT - font.charHeight) / 2;" line87="    //% whenUsed=true" line88="    const BOTTOM_BAR_SHIFT_X = (BOTTOM_BAR_BUTTON_WIDTH - font.charWidth * 3) / 2;" line89="    //% whenUsed=true" line90="    const BOTTOM_BAR_CONFIRM_X = (BOTTOM_BAR_BUTTON_WIDTH - font.charWidth * 2) / 2;" line91="    //% whenUsed=true" line92="    const CONFIRM_BUTTON_LEFT = screen.width - BOTTOM_BAR_BUTTON_WIDTH;" line93="" line94="    // Dimensions of the alphabet area" line95="    //% whenUsed=true" line96="    const ALPHABET_HEIGHT = NUM_ROWS * CELL_HEIGHT;" line97="    //% whenUsed=true" line98="    const ALPHABET_TOP = CONTENT_TOP + CONTENT_HEIGHT - ALPHABET_HEIGHT - BOTTOM_BAR_HEIGHT;" line99="    //% whenUsed=true" line100="    const ALPHABET_INPUT_MARGIN = 10;" line101="" line102="    // Dimensions of area where text is input" line103="    //% whenUsed=true" line104="    const INPUT_HEIGHT = INPUT_ROWS * CELL_HEIGHT;" line105="    //% whenUsed=true" line106="    const INPUT_TOP = ALPHABET_TOP - INPUT_HEIGHT - ALPHABET_INPUT_MARGIN;" line107="" line108="    // Dimensions of prompt message area" line109="    //% whenUsed=true" line110="    const PROMPT_HEIGHT = INPUT_TOP - CONTENT_TOP;" line111="" line112="    //% whenUsed=true" line113="    const lowerShiftText = &quot;ABC&quot;;" line114="    //% whenUsed=true" line115="    const upperShiftText = &quot;abc&quot;;" line116="    //% whenUsed=true" line117="    const digitsUpper = [&quot; &quot;, &quot;,&quot;, &quot;.&quot;, &quot;?&quot;, &quot;!&quot;, &quot;:&quot;, &quot;;&quot;, &quot;\&quot;&quot;, &quot;(&quot;, &quot;)&quot;];" line118="    //% whenUsed=true" line119="    const confirmText = &quot;OK&quot;;" line120="" line121="" line122="    export class Prompt_timer {" line123="        theme: PromptTheme;" line124="" line125="        message: string;" line126="        answerLength: number;" line127="        result: string;" line128="" line129="        private cursor: Sprite;" line130="        private shiftButton: Sprite;" line131="        private confirmButton: Sprite;" line132="" line133="        private letters: Sprite[];" line134="        private inputs: Sprite[];" line135="" line136="        private confirmPressed: boolean;" line137="        private cursorRow: number;" line138="        private cursorColumn: number;" line139="        private upper: boolean;" line140="        private inputIndex: number;" line141="        private blink: boolean;" line142="        private frameCount: number;" line143="        private timerEnd: number;" line144="        private timerSprite: Sprite;" line145="" line146="        constructor(theme?: PromptTheme) {" line147="            if (theme) {" line148="                this.theme = theme;" line149="            }" line150="            else {" line151="                this.theme = {" line152="                    colorPrompt: 1," line153="                    colorInput: 3," line154="                    colorInputHighlighted: 5," line155="                    colorInputText: 1," line156="                    colorAlphabet: 1," line157="                    colorCursor: 7," line158="                    colorBackground: 15," line159="                    colorBottomBackground: 3," line160="                    colorBottomText: 1," line161="                };" line162="            }" line163="            this.cursorRow = 0;" line164="            this.cursorColumn = 0;" line165="            this.upper = false;" line166="            this.inputIndex = 0;" line167="        }" line168="" line169="        show(message: string, answerLength: number, timeOut: number) {" line170="            this.message = message;" line171="            this.answerLength = answerLength;" line172="            this.inputIndex = 0;" line173="" line174="            if (timeOut != 0) {" line175="                this.timerEnd = game.currentScene().millis() + timeOut;" line176="            }" line177="" line178="            controller._setUserEventsEnabled(false);" line179="            game.pushScene();" line180="" line181="            this.draw();" line182="            this.registerHandlers();" line183="            this.confirmPressed = false;" line184="" line185="            pauseUntil(() =&gt; this.confirmPressed, timeOut);" line186="" line187="            game.popScene();" line188="            controller._setUserEventsEnabled(true);" line189="" line190="            if(this.confirmPressed)" line191="            {" line192="                return this.result;" line193="            }" line194="            else" line195="            {" line196="                return null;" line197="            }" line198="        }" line199="" line200="        private draw() {" line201="            this.drawPromptText();" line202="            this.drawKeyboard();" line203="            this.drawInputarea();" line204="            this.drawBottomBar();" line205="        }" line206="" line207="        private drawTimerCheck() {" line208="            if(this.timerEnd !== undefined) {" line209="                this.drawTimer(this.timerEnd - game.currentScene().millis());" line210="            }" line211="        }" line212="" line213="        private drawTimer(millis: number) {" line214="            if (millis &lt; 0) millis = 0;" line215="            millis |= 0;" line216="    " line217="            const seconds = Math.idiv(millis, 1000) + 1;" line218="            const secondsString = seconds.toString()" line219="            const letter = image.create(CELL_WIDTH, CELL_HEIGHT);" line220="" line221="            if(this.timerSprite === undefined) {" line222="                this.timerSprite = sprites.create(letter, -1);" line223="" line224="                // Set to the top right corner of the screen" line225="                this.timerSprite.setPosition(155, 5);" line226="            }" line227="" line228="            this.timerSprite.image.fill(3);" line229="" line230="            if(secondsString.length != 1) {" line231="                this.timerSprite.image.print(secondsString, 0, LETTER_OFFSET_Y);" line232="            }" line233="            else {" line234="                this.timerSprite.image.print(secondsString, LETTER_OFFSET_X, LETTER_OFFSET_Y);" line235="            }" line236="        }" line237="" line238="        private drawPromptText() {" line239="            const prompt = sprites.create(layoutText(this.message, CONTENT_WIDTH, PROMPT_HEIGHT, this.theme.colorPrompt), -1);" line240="            prompt.x = screen.width / 2" line241="            prompt.y = CONTENT_TOP + Math.floor((PROMPT_HEIGHT - prompt.height) / 2) + Math.floor(prompt.height / 2);" line242="        }" line243="" line244="        private drawInputarea() {" line245="            const answerLeft = ROW_LEFT + Math.floor(" line246="                ((CELL_WIDTH * ALPHABET_ROW_LENGTH) -" line247="                    CELL_WIDTH * Math.min(this.answerLength, ALPHABET_ROW_LENGTH)) / 2);" line248="" line249="            this.inputs = [];" line250="            for (let i = 0; i &lt; this.answerLength; i++) {" line251="                const blank = image.create(CELL_WIDTH, CELL_HEIGHT);" line252="                this.drawInput(blank, &quot;&quot;, this.theme.colorInput);" line253="" line254="                const col = i % ALPHABET_ROW_LENGTH;" line255="                const row = Math.floor(i / ALPHABET_ROW_LENGTH);" line256="" line257="                const s = sprites.create(blank, -1);" line258="                s.x = answerLeft + col * CELL_WIDTH;" line259="                s.y = INPUT_TOP + row * CELL_HEIGHT;" line260="                this.inputs.push(s);" line261="            }" line262="        }" line263="" line264="        private drawKeyboard() {" line265="            const cursorImage = image.create(CELL_WIDTH, CELL_HEIGHT);" line266="            cursorImage.fill(this.theme.colorCursor);" line267="            this.cursor = sprites.create(cursorImage, -1);" line268="            this.cursor.z = -1;" line269="            this.updateCursor();" line270="" line271="            this.letters = [];" line272="            for (let j = 0; j &lt; 36; j++) {" line273="                const letter2 = image.create(CELL_WIDTH, CELL_HEIGHT);" line274="" line275="                const col2 = j % ALPHABET_ROW_LENGTH;" line276="                const row2 = Math.floor(j / ALPHABET_ROW_LENGTH);" line277="" line278="                const t = sprites.create(letter2, -1);" line279="                t.x = ROW_LEFT + col2 * CELL_WIDTH;" line280="                t.y = ALPHABET_TOP + row2 * CELL_HEIGHT;" line281="" line282="                this.letters.push(t);" line283="            }" line284="            this.updateKeyboard();" line285="        }" line286="" line287="        private drawBottomBar() {" line288="            const bg = image.create(screen.width, BOTTOM_BAR_HEIGHT);" line289="            bg.fill(this.theme.colorBottomBackground);" line290="" line291="            const bgSprite = sprites.create(bg, -1);" line292="            bgSprite.x = screen.width / 2;" line293="            bgSprite.y = BOTTOM_BAR_TOP + BOTTOM_BAR_HEIGHT / 2;" line294="            bgSprite.z = -1;" line295="" line296="            this.shiftButton = sprites.create(image.create(BOTTOM_BAR_BUTTON_WIDTH, BOTTOM_BAR_HEIGHT), -1);" line297="            this.shiftButton.x = Math.floor(BOTTOM_BAR_BUTTON_WIDTH / 2);" line298="            this.shiftButton.y = BOTTOM_BAR_TOP + Math.ceil(BOTTOM_BAR_HEIGHT / 2);" line299="" line300="            this.confirmButton = sprites.create(image.create(BOTTOM_BAR_BUTTON_WIDTH, BOTTOM_BAR_HEIGHT), -1);" line301="            this.confirmButton.x = CONFIRM_BUTTON_LEFT + Math.floor(BOTTOM_BAR_BUTTON_WIDTH / 2);" line302="            this.confirmButton.y = BOTTOM_BAR_TOP + Math.ceil(BOTTOM_BAR_HEIGHT / 2);" line303="" line304="            this.updateButtons();" line305="        }" line306="" line307="        private updateButtons() {" line308="            if (this.cursorRow === 3 &amp;&amp; this.cursorColumn % 2 !== 1) {" line309="                this.shiftButton.image.fill(this.theme.colorCursor);" line310="            }" line311="            else {" line312="                this.shiftButton.image.fill(this.theme.colorBottomBackground);" line313="            }" line314="" line315="            if (this.upper) {" line316="                this.shiftButton.image.print(upperShiftText, BOTTOM_BAR_SHIFT_X, BOTTOM_BAR_TEXT_Y);" line317="            }" line318="            else {" line319="                this.shiftButton.image.print(lowerShiftText, BOTTOM_BAR_SHIFT_X, BOTTOM_BAR_TEXT_Y);" line320="            }" line321="" line322="" line323="            if (this.cursorRow === 3 &amp;&amp; this.cursorColumn % 2) {" line324="                this.confirmButton.image.fill(this.theme.colorCursor);" line325="            }" line326="            else {" line327="                this.confirmButton.image.fill(this.theme.colorBottomBackground);" line328="            }" line329="" line330="            this.confirmButton.image.print(confirmText, BOTTOM_BAR_CONFIRM_X, BOTTOM_BAR_TEXT_Y);" line331="        }" line332="" line333="        private updateCursor() {" line334="            if (this.cursorRow === 3) {" line335="                this.cursor.image.fill(0);" line336="                this.updateButtons();" line337="            }" line338="            else {" line339="                this.cursor.x = ROW_LEFT + this.cursorColumn * CELL_WIDTH;" line340="                this.cursor.y = ALPHABET_TOP + this.cursorRow * CELL_HEIGHT;" line341="            }" line342="        }" line343="" line344="        private updateSelectedInput() {" line345="            if (this.inputIndex &lt; this.answerLength) {" line346="                const u = this.inputs[this.inputIndex];" line347="                if (this.blink) {" line348="                    this.drawInput(u.image, &quot;&quot;, this.theme.colorInput);" line349="                }" line350="                else {" line351="                    this.drawInput(u.image, &quot;&quot;, this.theme.colorInputHighlighted)" line352="                }" line353="            }" line354="        }" line355="" line356="        private updateKeyboard() {" line357="            const len = this.letters.length;" line358="            for (let k = 0; k &lt; len; k++) {" line359="                const img = this.letters[k].image;" line360="                img.fill(0);" line361="                img.print(getCharForIndex(k, this.upper), LETTER_OFFSET_X, LETTER_OFFSET_Y);" line362="            }" line363="        }" line364="" line365="        private drawInput(img: Image, char: string, color: number) {" line366="            img.fill(0);" line367="            img.fillRect(BLANK_PADDING, CELL_HEIGHT - 1, CELL_WIDTH - BLANK_PADDING * 2, 1, color)" line368="" line369="            if (char) {" line370="                img.print(char, LETTER_OFFSET_X, LETTER_OFFSET_Y, this.theme.colorInputText, font);" line371="            }" line372="        }" line373="" line374="        private registerHandlers() {" line375="            controller.up.onEvent(SYSTEM_KEY_DOWN, () =&gt; {" line376="                this.moveVertical(true);" line377="            })" line378="" line379="            controller.down.onEvent(SYSTEM_KEY_DOWN, () =&gt; {" line380="                this.moveVertical(false);" line381="            })" line382="" line383="            controller.right.onEvent(SYSTEM_KEY_DOWN, () =&gt; {" line384="                this.moveHorizontal(true);" line385="            });" line386="" line387="            controller.left.onEvent(SYSTEM_KEY_DOWN, () =&gt; {" line388="                this.moveHorizontal(false);" line389="            });" line390="" line391="            controller.A.onEvent(SYSTEM_KEY_DOWN, () =&gt; {" line392="                this.confirm();" line393="            });" line394="" line395="            controller.B.onEvent(SYSTEM_KEY_DOWN, () =&gt; {" line396="                this.delete();" line397="            });" line398="" line399="" line400="            this.frameCount = 0;" line401="            this.blink = true;" line402="" line403="            game.onUpdate(() =&gt; {" line404="                this.frameCount = (this.frameCount + 1) % 30;" line405="" line406="                if (this.frameCount === 0) {" line407="                    this.blink = !this.blink;" line408="" line409="                    this.updateSelectedInput();" line410="                }" line411="" line412="                this.drawTimerCheck()" line413="            })" line414="        }" line415="" line416="        private moveVertical(up: boolean) {" line417="            if (up) {" line418="                if (this.cursorRow === 3) {" line419="                    this.cursor.image.fill(this.theme.colorCursor);" line420="                    this.cursorRow = 2;" line421="" line422="                    if (this.cursorColumn % 2) {" line423="                        this.cursorColumn = ALPHABET_ROW_LENGTH - 1;" line424="                    }" line425="                    else {" line426="                        this.cursorColumn = 0;" line427="                    }" line428="" line429="                    this.updateButtons();" line430="                }" line431="                else {" line432="                    this.cursorRow = Math.max(0, this.cursorRow - 1);" line433="                }" line434="            }" line435="            else {" line436="                this.cursorRow = Math.min(3, this.cursorRow + 1);" line437="" line438="                if (this.cursorRow === 3) {" line439="                    // Go to closest button" line440="                    this.cursorColumn = this.cursorColumn &gt; 5 ? 1 : 0;" line441="                }" line442="            }" line443="" line444="            this.updateCursor();" line445="        }" line446="" line447="        private moveHorizontal(right: boolean) {" line448="            if (right) {" line449="                this.cursorColumn = (this.cursorColumn + 1) % ALPHABET_ROW_LENGTH;" line450="            }" line451="            else {" line452="                this.cursorColumn = (this.cursorColumn + (ALPHABET_ROW_LENGTH - 1)) % ALPHABET_ROW_LENGTH;" line453="            }" line454="" line455="            this.updateCursor();" line456="        }" line457="" line458="        private confirm() {" line459="            if (this.cursorRow === 3) {" line460="                if (this.cursorColumn % 2) {" line461="                    this.confirmPressed = true;" line462="                }" line463="                else {" line464="                    this.upper = !this.upper;" line465="                    this.updateKeyboard();" line466="                    this.updateButtons();" line467="                }" line468="            }" line469="            else {" line470="                if (this.inputIndex &gt;= this.answerLength) return;" line471="" line472="                const index = this.cursorColumn + this.cursorRow * ALPHABET_ROW_LENGTH" line473="                const letter22 = getCharForIndex(index, this.upper);" line474="" line475="                if (!this.result) {" line476="                    this.result = letter22;" line477="                }" line478="                else {" line479="                    this.result += letter22;" line480="                }" line481="" line482="                const sprite = this.inputs[this.inputIndex];" line483="                this.changeInputIndex(1);" line484="                this.drawInput(sprite.image, letter22, this.theme.colorInput);" line485="            }" line486="        }" line487="" line488="        private delete() {" line489="            if (this.inputIndex &lt;= 0) return;" line490="" line491="            if (this.inputIndex &lt; this.answerLength) {" line492="                this.drawInput(this.inputs[this.inputIndex].image, &quot;&quot;, this.theme.colorInput);" line493="            }" line494="" line495="            this.result = this.result.substr(0, this.result.length - 1);" line496="" line497="            this.changeInputIndex(-1);" line498="        }" line499="" line500="        private changeInputIndex(delta: number) {" line501="            this.inputIndex += delta;" line502="            this.frameCount = 0" line503="            this.blink = false;" line504="            this.updateSelectedInput();" line505="        }" line506="    }" line507="" line508="    function layoutText(message: string, width: number, height: number, color: number) {" line509="        const lineHeight = font.charHeight + PROMPT_LINE_SPACING;" line510="" line511="        const lineLength = Math.floor(width / font.charWidth);" line512="        const numLines = Math.floor(height / lineHeight);" line513="" line514="        let lines: string[] = [];" line515="        let word: string;" line516="        let line: string;" line517="" line518="        let pushWord = () =&gt; {" line519="            if (line) {" line520="                if (line.length + word.length + 1 &gt; lineLength) {" line521="                    lines.push(line);" line522="                    line = word;" line523="                }" line524="                else {" line525="                    line = line + &quot; &quot; + word;" line526="                }" line527="            }" line528="            else {" line529="                line = word;" line530="            }" line531="" line532="            word = null;" line533="        }" line534="" line535="        for (let l = 0; l &lt; message.length; l++) {" line536="            const char = message.charAt(l);" line537="" line538="            if (char === &quot; &quot;) {" line539="                if (word) {" line540="                    pushWord();" line541="                }" line542="                else {" line543="                    word = &quot; &quot;;" line544="                }" line545="            }" line546="            else if (!word) {" line547="                word = char;" line548="            }" line549="            else {" line550="                word += char;" line551="            }" line552="        }" line553="" line554="        if (word) {" line555="            pushWord();" line556="        }" line557="" line558="        if (line) {" line559="            lines.push(line);" line560="        }" line561="" line562="        let maxLineWidth = 0;" line563="        for (let m = 0; m &lt; lines.length; m++) {" line564="            maxLineWidth = Math.max(maxLineWidth, lines[m].length);" line565="        }" line566="" line567="        const actualWidth = maxLineWidth * font.charWidth;" line568="        const actualHeight = lines.length * lineHeight;" line569="" line570="        const res = image.create(actualWidth, actualHeight);" line571="" line572="        for (let n = 0; n &lt; lines.length; n++) {" line573="            if ((n + 1) &gt; numLines) break;" line574="            res.print(lines[n], 0, n * lineHeight, color, font);" line575="        }" line576="" line577="        return res;" line578="    }" line579="" line580="    function getCharForIndex(index: number, upper: boolean) {" line581="        if (index &lt; 26) {" line582="            return String.fromCharCode(index + (upper ? 65 : 97));" line583="        }" line584="        else {" line585="            if (upper) {" line586="                return digitsUpper[index - 26];" line587="            }" line588="            else {" line589="                return &quot;&quot; + (index - 26);" line590="            }" line591="        }" line592="    }" line593="}" numlines="594"></mutation></block></statement></block></xml>