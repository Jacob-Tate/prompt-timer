<xml xmlns="https://developers.google.com/blockly/xml"><block type="pxt-on-start" x="10" y="10"><statement name="HANDLER"><block type="typescript_statement" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace game {" line1="    export interface PromptTheme {" line2="        colorPrompt: number;" line3="        colorInput: number;" line4="        colorInputHighlighted: number;" line5="        colorInputText: number;" line6="        colorAlphabet: number;" line7="        colorCursor: number;" line8="        colorBackground: number;" line9="        colorBottomBackground: number;" line10="        colorBottomText: number;" line11="    }" line12="" line13="    /**" line14="     * Ask the player for a string value with a timer!" line15="     * @param message The message to display on the text-entry screen" line16="     * @param timeOut The time to timeOut" line17="     */" line18="    //% group=&quot;Gameplay&quot;" line19="    //% weight=10 help=game/ask-for-string-timer" line20="    //% blockId=gameaskforstringtimer block=&quot;ask for string %message || and timeout after %timeOut&quot;" line21="    //% message.defl=&quot;&quot;" line22="    //% timeOut.defl=0" line23="    //% timeOut.min=0" line24="    //% timeOut.max=24" line25="    //% group=&quot;Prompt with Timer&quot;" line26="    export function askForStringTimer(message: string, timeOut: number = 0) {" line27="        let p = new game.Prompt_timer();" line28="        const result = p.show(message, 12, timeOut * 1000);" line29="        return result;" line30="    }" line31="" line32="" line33="    //% whenUsed=true" line34="    const font = image.font8; // FONT8-TODO" line35="    //% whenUsed=true" line36="    const PADDING = 4;" line37="    //% whenUsed=true" line38="    const PROMPT_LINE_SPACING = 2;" line39="" line40="    //% whenUsed=true" line41="    const NUM_LETTERS = 26;" line42="    //% whenUsed=true" line43="    const ALPHABET_ROW_LENGTH = 12;" line44="    //% whenUsed=true" line45="    const NUM_ROWS = Math.ceil(NUM_LETTERS / ALPHABET_ROW_LENGTH);" line46="    //% whenUsed=true" line47="    const INPUT_ROWS = 2;" line48="" line49="    //% whenUsed=true" line50="    const CONTENT_WIDTH = screen.width - PADDING * 2;" line51="    //% whenUsed=true" line52="    const CONTENT_HEIGHT = screen.height - PADDING * 2;" line53="    //% whenUsed=true" line54="    const CONTENT_TOP = PADDING;" line55="" line56="    // Dimensions of a &quot;cell&quot; that contains a letter" line57="    //% whenUsed=true" line58="    const CELL_WIDTH = Math.floor(CONTENT_WIDTH / ALPHABET_ROW_LENGTH);" line59="    //% whenUsed=true" line60="    const CELL_HEIGHT = CELL_WIDTH;" line61="    //% whenUsed=true" line62="    const LETTER_OFFSET_X = Math.floor((CELL_WIDTH - font.charWidth) / 2);" line63="    //% whenUsed=true" line64="    const LETTER_OFFSET_Y = Math.floor((CELL_HEIGHT - font.charHeight) / 2);" line65="    //% whenUsed=true" line66="    const BLANK_PADDING = 1;" line67="    //% whenUsed=true" line68="    const ROW_LEFT = PADDING + CELL_WIDTH / 2 + Math.floor((CONTENT_WIDTH - (CELL_WIDTH * ALPHABET_ROW_LENGTH)) / 2);" line69="" line70="    // Dimensions of the bottom bar" line71="    //% whenUsed=true" line72="    const BOTTOM_BAR_ALPHABET_MARGIN = 4;" line73="    //% whenUsed=true" line74="    const BOTTOM_BAR_HEIGHT = PADDING + BOTTOM_BAR_ALPHABET_MARGIN + CELL_HEIGHT;" line75="    //% whenUsed=true" line76="    const BOTTOM_BAR_TOP = screen.height - BOTTOM_BAR_HEIGHT;" line77="    //% whenUsed=true" line78="    const BOTTOM_BAR_BUTTON_WIDTH = PADDING * 2 + font.charWidth * 3;" line79="    //% whenUsed=true" line80="    const BOTTOM_BAR_TEXT_Y = (BOTTOM_BAR_HEIGHT - font.charHeight) / 2;" line81="    //% whenUsed=true" line82="    const BOTTOM_BAR_SHIFT_X = (BOTTOM_BAR_BUTTON_WIDTH - font.charWidth * 3) / 2;" line83="    //% whenUsed=true" line84="    const BOTTOM_BAR_CONFIRM_X = (BOTTOM_BAR_BUTTON_WIDTH - font.charWidth * 2) / 2;" line85="    //% whenUsed=true" line86="    const CONFIRM_BUTTON_LEFT = screen.width - BOTTOM_BAR_BUTTON_WIDTH;" line87="" line88="    // Dimensions of the alphabet area" line89="    //% whenUsed=true" line90="    const ALPHABET_HEIGHT = NUM_ROWS * CELL_HEIGHT;" line91="    //% whenUsed=true" line92="    const ALPHABET_TOP = CONTENT_TOP + CONTENT_HEIGHT - ALPHABET_HEIGHT - BOTTOM_BAR_HEIGHT;" line93="    //% whenUsed=true" line94="    const ALPHABET_INPUT_MARGIN = 10;" line95="" line96="    // Dimensions of area where text is input" line97="    //% whenUsed=true" line98="    const INPUT_HEIGHT = INPUT_ROWS * CELL_HEIGHT;" line99="    //% whenUsed=true" line100="    const INPUT_TOP = ALPHABET_TOP - INPUT_HEIGHT - ALPHABET_INPUT_MARGIN;" line101="" line102="    // Dimensions of prompt message area" line103="    //% whenUsed=true" line104="    const PROMPT_HEIGHT = INPUT_TOP - CONTENT_TOP;" line105="" line106="    //% whenUsed=true" line107="    const lowerShiftText = &quot;ABC&quot;;" line108="    //% whenUsed=true" line109="    const upperShiftText = &quot;abc&quot;;" line110="    //% whenUsed=true" line111="    const digitsUpper = [&quot; &quot;, &quot;,&quot;, &quot;.&quot;, &quot;?&quot;, &quot;!&quot;, &quot;:&quot;, &quot;;&quot;, &quot;\&quot;&quot;, &quot;(&quot;, &quot;)&quot;];" line112="    //% whenUsed=true" line113="    const confirmText = &quot;OK&quot;;" line114="" line115="" line116="    export class Prompt_timer {" line117="        theme: PromptTheme;" line118="" line119="        message: string;" line120="        answerLength: number;" line121="        result: string;" line122="" line123="        private cursor: Sprite;" line124="        private shiftButton: Sprite;" line125="        private confirmButton: Sprite;" line126="" line127="        private letters: Sprite[];" line128="        private inputs: Sprite[];" line129="" line130="        private confirmPressed: boolean;" line131="        private cursorRow: number;" line132="        private cursorColumn: number;" line133="        private upper: boolean;" line134="        private inputIndex: number;" line135="        private blink: boolean;" line136="        private frameCount: number;" line137="        private timerEnd: number;" line138="" line139="        constructor(theme?: PromptTheme) {" line140="            if (theme) {" line141="                this.theme = theme;" line142="            }" line143="            else {" line144="                this.theme = {" line145="                    colorPrompt: 1," line146="                    colorInput: 3," line147="                    colorInputHighlighted: 5," line148="                    colorInputText: 1," line149="                    colorAlphabet: 1," line150="                    colorCursor: 7," line151="                    colorBackground: 15," line152="                    colorBottomBackground: 3," line153="                    colorBottomText: 1," line154="                };" line155="            }" line156="            this.cursorRow = 0;" line157="            this.cursorColumn = 0;" line158="            this.upper = false;" line159="            this.inputIndex = 0;" line160="        }" line161="" line162="        show(message: string, answerLength: number, timeOut: number) {" line163="            this.message = message;" line164="            this.answerLength = answerLength;" line165="            this.inputIndex = 0;" line166="            this.timerEnd = game.currentScene().millis() + timeOut;" line167="" line168="            controller._setUserEventsEnabled(false);" line169="            game.pushScene();" line170="" line171="            this.draw();" line172="            this.registerHandlers();" line173="            this.confirmPressed = false;" line174="" line175="            pauseUntil(() =&gt; this.confirmPressed, timeOut);" line176="" line177="            game.popScene();" line178="            controller._setUserEventsEnabled(true);" line179="" line180="            return this.result;" line181="        }" line182="" line183="        private draw() {" line184="            this.drawTimerCheck();" line185="            this.drawPromptText();" line186="            this.drawKeyboard();" line187="            this.drawInputarea();" line188="            this.drawBottomBar();" line189="            console.log(&quot;end Draw&quot;)" line190="        }" line191="" line192="        private drawTimerCheck() {" line193="            console.log(&quot;timer check&quot;)" line194="            if(this.timerEnd !== undefined)" line195="            {" line196="                console.log(&quot;timer check 2&quot;)" line197="                const scene = game.currentScene();" line198="                const elapsed = this.timerEnd - scene.millis();" line199="                this.drawTimer(elapsed);" line200="                let t = elapsed / 1000;" line201="                if(t &lt;= 0)" line202="                {" line203="                    t = 0;" line204="                    // Call handler??" line205="                    // Call game over??" line206="                }" line207="            }" line208="        }" line209="" line210="        private formatDecimal(val: number) {" line211="            val |= 0;" line212="            if (val &lt; 10) {" line213="                return &quot;0&quot; + val;" line214="            }" line215="            return val.toString();" line216="        }" line217="" line218="        private drawTimer(millis: number) {" line219="            console.log(&quot;start Draw&quot;)" line220="            if (millis &lt; 0) millis = 0;" line221="            millis |= 0;" line222="" line223="            const font2 = image.font8;" line224="            const smallFont = image.font5;" line225="            const seconds = Math.idiv(millis, 1000);" line226="            const width = font2.charWidth * 5 - 2;" line227="            let left = (screen.width &gt;&gt; 1) - (width &gt;&gt; 1) + 1;" line228="            let color1 = info.fontColor();" line229="            let color2 = info.backgroundColor();" line230="" line231="            if (seconds &lt; 10 &amp;&amp; (seconds &amp; 1) &amp;&amp; !screen.isMono) {" line232="                const temp = color1;" line233="                color1 = color2;" line234="                color2 = temp;" line235="            }" line236="" line237="            screen.fillRect(left - 3, 0, width + 6, font2.charHeight + 3, info.borderColor())" line238="            screen.fillRect(left - 2, 0, width + 4, font2.charHeight + 2, color2)" line239="" line240="" line241="            if (seconds &lt; 60) {" line242="                const top = 1;" line243="                const remainder = Math.idiv(millis % 1000, 10);" line244="                console.log(&quot;start Draw2&quot;)" line245="                screen.print(this.formatDecimal(seconds) + &quot;.&quot;, left, top, color1, font2)" line246="                const decimalLeft = left + 3 * font2.charWidth;" line247="                screen.print(this.formatDecimal(remainder), decimalLeft, top + 2, color1, smallFont)" line248="            }" line249="            else {" line250="                const minutes = Math.idiv(seconds, 60);" line251="                const remainder2 = seconds % 60;" line252="                screen.print(this.formatDecimal(minutes) + &quot;:&quot; + this.formatDecimal(remainder2), left, 1, color1, font2);" line253="            }" line254="        }" line255="" line256="        private drawPromptText() {" line257="            const prompt = sprites.create(layoutText(this.message, CONTENT_WIDTH, PROMPT_HEIGHT, this.theme.colorPrompt), -1);" line258="            prompt.x = screen.width / 2" line259="            prompt.y = CONTENT_TOP + Math.floor((PROMPT_HEIGHT - prompt.height) / 2) + Math.floor(prompt.height / 2);" line260="        }" line261="" line262="        private drawInputarea() {" line263="            const answerLeft = ROW_LEFT + Math.floor(" line264="                ((CELL_WIDTH * ALPHABET_ROW_LENGTH) -" line265="                    CELL_WIDTH * Math.min(this.answerLength, ALPHABET_ROW_LENGTH)) / 2);" line266="" line267="            this.inputs = [];" line268="            for (let i = 0; i &lt; this.answerLength; i++) {" line269="                const blank = image.create(CELL_WIDTH, CELL_HEIGHT);" line270="                this.drawInput(blank, &quot;&quot;, this.theme.colorInput);" line271="" line272="                const col = i % ALPHABET_ROW_LENGTH;" line273="                const row = Math.floor(i / ALPHABET_ROW_LENGTH);" line274="" line275="                const s = sprites.create(blank, -1);" line276="                s.x = answerLeft + col * CELL_WIDTH;" line277="                s.y = INPUT_TOP + row * CELL_HEIGHT;" line278="                this.inputs.push(s);" line279="            }" line280="        }" line281="" line282="        private drawKeyboard() {" line283="            const cursorImage = image.create(CELL_WIDTH, CELL_HEIGHT);" line284="            cursorImage.fill(this.theme.colorCursor);" line285="            this.cursor = sprites.create(cursorImage, -1);" line286="            this.cursor.z = -1;" line287="            this.updateCursor();" line288="" line289="            this.letters = [];" line290="            for (let j = 0; j &lt; 36; j++) {" line291="                const letter = image.create(CELL_WIDTH, CELL_HEIGHT);" line292="" line293="                const col2 = j % ALPHABET_ROW_LENGTH;" line294="                const row2 = Math.floor(j / ALPHABET_ROW_LENGTH);" line295="" line296="                const u = sprites.create(letter, -1);" line297="                u.x = ROW_LEFT + col2 * CELL_WIDTH;" line298="                u.y = ALPHABET_TOP + row2 * CELL_HEIGHT;" line299="" line300="                this.letters.push(u);" line301="            }" line302="            this.updateKeyboard();" line303="        }" line304="" line305="        private drawBottomBar() {" line306="            const bg = image.create(screen.width, BOTTOM_BAR_HEIGHT);" line307="            bg.fill(this.theme.colorBottomBackground);" line308="" line309="            const bgSprite = sprites.create(bg, -1);" line310="            bgSprite.x = screen.width / 2;" line311="            bgSprite.y = BOTTOM_BAR_TOP + BOTTOM_BAR_HEIGHT / 2;" line312="            bgSprite.z = -1;" line313="" line314="            this.shiftButton = sprites.create(image.create(BOTTOM_BAR_BUTTON_WIDTH, BOTTOM_BAR_HEIGHT), -1);" line315="            this.shiftButton.x = Math.floor(BOTTOM_BAR_BUTTON_WIDTH / 2);" line316="            this.shiftButton.y = BOTTOM_BAR_TOP + Math.ceil(BOTTOM_BAR_HEIGHT / 2);" line317="" line318="            this.confirmButton = sprites.create(image.create(BOTTOM_BAR_BUTTON_WIDTH, BOTTOM_BAR_HEIGHT), -1);" line319="            this.confirmButton.x = CONFIRM_BUTTON_LEFT + Math.floor(BOTTOM_BAR_BUTTON_WIDTH / 2);" line320="            this.confirmButton.y = BOTTOM_BAR_TOP + Math.ceil(BOTTOM_BAR_HEIGHT / 2);" line321="" line322="            this.updateButtons();" line323="        }" line324="" line325="        private updateButtons() {" line326="            if (this.cursorRow === 3 &amp;&amp; this.cursorColumn % 2 !== 1) {" line327="                this.shiftButton.image.fill(this.theme.colorCursor);" line328="            }" line329="            else {" line330="                this.shiftButton.image.fill(this.theme.colorBottomBackground);" line331="            }" line332="" line333="            if (this.upper) {" line334="                this.shiftButton.image.print(upperShiftText, BOTTOM_BAR_SHIFT_X, BOTTOM_BAR_TEXT_Y);" line335="            }" line336="            else {" line337="                this.shiftButton.image.print(lowerShiftText, BOTTOM_BAR_SHIFT_X, BOTTOM_BAR_TEXT_Y);" line338="            }" line339="" line340="" line341="            if (this.cursorRow === 3 &amp;&amp; this.cursorColumn % 2) {" line342="                this.confirmButton.image.fill(this.theme.colorCursor);" line343="            }" line344="            else {" line345="                this.confirmButton.image.fill(this.theme.colorBottomBackground);" line346="            }" line347="" line348="            this.confirmButton.image.print(confirmText, BOTTOM_BAR_CONFIRM_X, BOTTOM_BAR_TEXT_Y);" line349="        }" line350="" line351="        private updateCursor() {" line352="            if (this.cursorRow === 3) {" line353="                this.cursor.image.fill(0);" line354="                this.updateButtons();" line355="            }" line356="            else {" line357="                this.cursor.x = ROW_LEFT + this.cursorColumn * CELL_WIDTH;" line358="                this.cursor.y = ALPHABET_TOP + this.cursorRow * CELL_HEIGHT;" line359="            }" line360="        }" line361="" line362="        private updateSelectedInput() {" line363="            if (this.inputIndex &lt; this.answerLength) {" line364="                const v = this.inputs[this.inputIndex];" line365="                if (this.blink) {" line366="                    this.drawInput(v.image, &quot;&quot;, this.theme.colorInput);" line367="                }" line368="                else {" line369="                    this.drawInput(v.image, &quot;&quot;, this.theme.colorInputHighlighted)" line370="                }" line371="            }" line372="        }" line373="" line374="        private updateKeyboard() {" line375="            const len = this.letters.length;" line376="            for (let k = 0; k &lt; len; k++) {" line377="                const img = this.letters[k].image;" line378="                img.fill(0);" line379="                img.print(getCharForIndex(k, this.upper), LETTER_OFFSET_X, LETTER_OFFSET_Y);" line380="            }" line381="        }" line382="" line383="        private drawInput(img: Image, char: string, color: number) {" line384="            img.fill(0);" line385="            img.fillRect(BLANK_PADDING, CELL_HEIGHT - 1, CELL_WIDTH - BLANK_PADDING * 2, 1, color)" line386="" line387="            if (char) {" line388="                img.print(char, LETTER_OFFSET_X, LETTER_OFFSET_Y, this.theme.colorInputText, font);" line389="            }" line390="        }" line391="" line392="        private registerHandlers() {" line393="            controller.up.onEvent(SYSTEM_KEY_DOWN, () =&gt; {" line394="                this.moveVertical(true);" line395="            })" line396="" line397="            controller.down.onEvent(SYSTEM_KEY_DOWN, () =&gt; {" line398="                this.moveVertical(false);" line399="            })" line400="" line401="            controller.right.onEvent(SYSTEM_KEY_DOWN, () =&gt; {" line402="                this.moveHorizontal(true);" line403="            });" line404="" line405="            controller.left.onEvent(SYSTEM_KEY_DOWN, () =&gt; {" line406="                this.moveHorizontal(false);" line407="            });" line408="" line409="            controller.A.onEvent(SYSTEM_KEY_DOWN, () =&gt; {" line410="                this.confirm();" line411="            });" line412="" line413="            controller.B.onEvent(SYSTEM_KEY_DOWN, () =&gt; {" line414="                this.delete();" line415="            });" line416="" line417="" line418="            this.frameCount = 0;" line419="            this.blink = true;" line420="" line421="            game.onUpdate(() =&gt; {" line422="                this.frameCount = (this.frameCount + 1) % 30;" line423="" line424="                if (this.frameCount === 0) {" line425="                    this.blink = !this.blink;" line426="" line427="                    this.updateSelectedInput();" line428="                }" line429="            })" line430="        }" line431="" line432="        private moveVertical(up: boolean) {" line433="            if (up) {" line434="                if (this.cursorRow === 3) {" line435="                    this.cursor.image.fill(this.theme.colorCursor);" line436="                    this.cursorRow = 2;" line437="" line438="                    if (this.cursorColumn % 2) {" line439="                        this.cursorColumn = ALPHABET_ROW_LENGTH - 1;" line440="                    }" line441="                    else {" line442="                        this.cursorColumn = 0;" line443="                    }" line444="" line445="                    this.updateButtons();" line446="                }" line447="                else {" line448="                    this.cursorRow = Math.max(0, this.cursorRow - 1);" line449="                }" line450="            }" line451="            else {" line452="                this.cursorRow = Math.min(3, this.cursorRow + 1);" line453="" line454="                if (this.cursorRow === 3) {" line455="                    // Go to closest button" line456="                    this.cursorColumn = this.cursorColumn &gt; 5 ? 1 : 0;" line457="                }" line458="            }" line459="" line460="            this.updateCursor();" line461="        }" line462="" line463="        private moveHorizontal(right: boolean) {" line464="            if (right) {" line465="                this.cursorColumn = (this.cursorColumn + 1) % ALPHABET_ROW_LENGTH;" line466="            }" line467="            else {" line468="                this.cursorColumn = (this.cursorColumn + (ALPHABET_ROW_LENGTH - 1)) % ALPHABET_ROW_LENGTH;" line469="            }" line470="" line471="            this.updateCursor();" line472="        }" line473="" line474="        private confirm() {" line475="            if (this.cursorRow === 3) {" line476="                if (this.cursorColumn % 2) {" line477="                    this.confirmPressed = true;" line478="                }" line479="                else {" line480="                    this.upper = !this.upper;" line481="                    this.updateKeyboard();" line482="                    this.updateButtons();" line483="                }" line484="            }" line485="            else {" line486="                if (this.inputIndex &gt;= this.answerLength) return;" line487="" line488="                const index = this.cursorColumn + this.cursorRow * ALPHABET_ROW_LENGTH" line489="                const letter2 = getCharForIndex(index, this.upper);" line490="" line491="                if (!this.result) {" line492="                    this.result = letter2;" line493="                }" line494="                else {" line495="                    this.result += letter2;" line496="                }" line497="" line498="                const sprite = this.inputs[this.inputIndex];" line499="                this.changeInputIndex(1);" line500="                this.drawInput(sprite.image, letter2, this.theme.colorInput);" line501="            }" line502="        }" line503="" line504="        private delete() {" line505="            if (this.inputIndex &lt;= 0) return;" line506="" line507="            if (this.inputIndex &lt; this.answerLength) {" line508="                this.drawInput(this.inputs[this.inputIndex].image, &quot;&quot;, this.theme.colorInput);" line509="            }" line510="" line511="            this.result = this.result.substr(0, this.result.length - 1);" line512="" line513="            this.changeInputIndex(-1);" line514="        }" line515="" line516="        private changeInputIndex(delta: number) {" line517="            this.inputIndex += delta;" line518="            this.frameCount = 0" line519="            this.blink = false;" line520="            this.updateSelectedInput();" line521="        }" line522="    }" line523="" line524="    function layoutText(message: string, width: number, height: number, color: number) {" line525="        const lineHeight = font.charHeight + PROMPT_LINE_SPACING;" line526="" line527="        const lineLength = Math.floor(width / font.charWidth);" line528="        const numLines = Math.floor(height / lineHeight);" line529="" line530="        let lines: string[] = [];" line531="        let word: string;" line532="        let line: string;" line533="" line534="        let pushWord = () =&gt; {" line535="            if (line) {" line536="                if (line.length + word.length + 1 &gt; lineLength) {" line537="                    lines.push(line);" line538="                    line = word;" line539="                }" line540="                else {" line541="                    line = line + &quot; &quot; + word;" line542="                }" line543="            }" line544="            else {" line545="                line = word;" line546="            }" line547="" line548="            word = null;" line549="        }" line550="" line551="        for (let l = 0; l &lt; message.length; l++) {" line552="            const char = message.charAt(l);" line553="" line554="            if (char === &quot; &quot;) {" line555="                if (word) {" line556="                    pushWord();" line557="                }" line558="                else {" line559="                    word = &quot; &quot;;" line560="                }" line561="            }" line562="            else if (!word) {" line563="                word = char;" line564="            }" line565="            else {" line566="                word += char;" line567="            }" line568="        }" line569="" line570="        if (word) {" line571="            pushWord();" line572="        }" line573="" line574="        if (line) {" line575="            lines.push(line);" line576="        }" line577="" line578="        let maxLineWidth = 0;" line579="        for (let m = 0; m &lt; lines.length; m++) {" line580="            maxLineWidth = Math.max(maxLineWidth, lines[m].length);" line581="        }" line582="" line583="        const actualWidth = maxLineWidth * font.charWidth;" line584="        const actualHeight = lines.length * lineHeight;" line585="" line586="        const res = image.create(actualWidth, actualHeight);" line587="" line588="        for (let n = 0; n &lt; lines.length; n++) {" line589="            if ((n + 1) &gt; numLines) break;" line590="            res.print(lines[n], 0, n * lineHeight, color, font);" line591="        }" line592="" line593="        return res;" line594="    }" line595="" line596="    function getCharForIndex(index: number, upper: boolean) {" line597="        if (index &lt; 26) {" line598="            return String.fromCharCode(index + (upper ? 65 : 97));" line599="        }" line600="        else {" line601="            if (upper) {" line602="                return digitsUpper[index - 26];" line603="            }" line604="            else {" line605="                return &quot;&quot; + (index - 26);" line606="            }" line607="        }" line608="    }" line609="}" numlines="610"></mutation></block></statement></block></xml>